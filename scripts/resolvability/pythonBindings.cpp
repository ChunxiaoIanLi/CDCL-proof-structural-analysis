#include "src/paramComputation.h"
#include "src/PythonMergeabilityInterface.h"
#include <iostream>

extern "C" {
	PythonMergeabilityInterface* PMI_init() {
		return new PythonMergeabilityInterface();
	}

	void PMI_destroy(PythonMergeabilityInterface* interface) {
		delete interface;
	}

	void PMI_setClauses(PythonMergeabilityInterface* interface, long long* pyClauses, long long size) {
		interface->initializeClauses(pyClauses, size);
	}

	void PMI_calculate(PythonMergeabilityInterface* interface, long long* varSet, int clauseFilterMode) {
		interface->calculateMergeabilityScore(varSet, clauseFilterMode);
	}

	/// @deprecated Use PMI_calculate instead
	void PMI_calculateMergeability(PythonMergeabilityInterface* interface, long long* varSet) {
		PMI_calculate(interface, varSet, 0);
	}

	// Get the total number of overlapping literals in resolvable clause pairs
	long PMI_getMergeability(PythonMergeabilityInterface* interface) {
		return interface->getMergeability();
	}

	// Get mergeability score normalized by the total number of resolvable clauses
	double PMI_getMergeabilityScoreNorm1(PythonMergeabilityInterface* interface) {
		return interface->getMergeabilityScoreNorm1();
	}

	// Get mergeability score normalized by m^2
	double PMI_getMergeabilityScoreNorm2(PythonMergeabilityInterface* interface) {
		return interface->getMergeabilityScoreNorm2();
	}

	// Get the average clause width before resolution
	double PMI_getPreResolutionClauseWidth(PythonMergeabilityInterface* interface) {
		return interface->getPreResolutionClauseWidth();
	}

	// Get the average clause width of clauses generated by the first step of resolution
	double PMI_getPostResolutionClauseWidth(PythonMergeabilityInterface* interface) {
		return interface->getPostResolutionClauseWidth();
	}
}
