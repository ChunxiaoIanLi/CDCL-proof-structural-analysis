import ctypes
lib = ctypes.CDLL('./libmergeability.so')

# An object for working with the C/C++ library
class PMI(object):
	def __init__(self):
		self.obj = lib.PMI_init()

		# Configure ctypes to work with library functions
		lib.PMI_setClauses.restype = None
		lib.PMI_calculateMergeability.restype = None
		lib.PMI_calculate.restype = None
		lib.PMI_getMergeability.restype = ctypes.c_int
		lib.PMI_getMergeabilityScoreNorm1.restype = ctypes.c_double
		lib.PMI_getMergeabilityScoreNorm2.restype = ctypes.c_double
		lib.PMI_getPreResolutionClauseWidth.restype = ctypes.c_double
		lib.PMI_getPostResolutionClauseWidth.restype = ctypes.c_double

	def setClauses(self, clauses):
		arr = (ctypes.c_longlong * len(clauses))(*clauses)
		lib.PMI_setClauses.argtypes = [ ctypes.c_void_p, ctypes.c_longlong * len(clauses), ctypes.c_longlong ]
		lib.PMI_setClauses(self.obj, arr, len(clauses))

	def calculate(self, varSet, clauseFilterMode = 0):
		"""
		Calculate instance parameters over a subset of clauses specified by a given variable set
		@param varSet The variables by which clauses should be filtered when performing computations
		@param clauseFilterMode The algorithm to use when filtering clauses
			0: Don't accept any clauses with a variable outside of the variable set
			1: Copy the subset of each clause which occurs in the variable set
		"""
		arr = (ctypes.c_longlong * len(varSet))(*varSet)
		lib.PMI_calculate.argtypes = [ ctypes.c_void_p, ctypes.c_longlong * len(varSet), ctypes.c_int ]
		lib.PMI_calculate(self.obj, arr, clauseFilterMode)

	def calculateMergeability(self, varSet):
		# This function is deprecated! Use calculate() instead
		self.calculateMergeability(varSet)

	def getMergeability(self):
		""" Get the total number of overlapping literals in resolvable clause pairs """
		lib.PMI_getMergeability.argtypes = [ ctypes.c_void_p ]
		return lib.PMI_getMergeability(self.obj)

	def getMergeabilityScoreNorm1(self):
		""" Get the mergeability score normalized by resolvability """
		lib.PMI_getMergeabilityScoreNorm1.argtypes = [ ctypes.c_void_p ]
		return lib.PMI_getMergeabilityScoreNorm1(self.obj)

	def getMergeabilityScoreNorm2(self):
		""" Get the mergeability score normalized by m^2 """
		lib.PMI_getMergeabilityScoreNorm2.argtypes = [ ctypes.c_void_p ]
		return lib.PMI_getMergeabilityScoreNorm2(self.obj)

	def getPreResolutionClauseWidth(self):
		""" Get the average clause width before resolution """
		lib.PMI_getPreResolutionClauseWidth.argtypes = [ ctypes.c_void_p ]
		return lib.PMI_getPreResolutionClauseWidth(self.obj)

	def getPostResolutionClauseWidth(self):
		""" Get the average clause width of clauses generated by the first step of resolution """
		lib.PMI_getPostResolutionClauseWidth.argtypes = [ ctypes.c_void_p ]
		return lib.PMI_getPostResolutionClauseWidth(self.obj)
