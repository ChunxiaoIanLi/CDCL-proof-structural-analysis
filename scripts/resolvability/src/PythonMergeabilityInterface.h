#ifndef PY_MERGEABILITY_H
#define PY_MERGEABILITY_H

#include <set>
#include <vector>
#include "paramComputation.h"

class PythonMergeabilityInterface {
public:
	/**
	 * @brief Store python clauses in C++
	 * @param pyClauses 1D array storing clauses separated by zeros
	 * @param size The total length of the array
	 */
	void initializeClauses(long long* pyClauses, long long size);

	/**
	 * @brief Calculate instance parameters over a subset of clauses specified by a given variable set
	 * @param varSet The variables by which clauses should be filtered when performing computations
	 * @param clauseFilterMode The algorithm to use when filtering clauses
	 *     0: Don't accept any clauses with a variable outside of the variable set
	 *     1: Copy the subset of each clause which occurs in the variable set
	 */
	void calculateMergeabilityScore(long long* varSet, int clauseFilterMode);

	/**
	 * @brief Get the clause-variable ratio
	 */
	double getCVR();

	/**
	 * @brief Get the total number of overlapping literals in resolvable clause pairs
	 */
	long getMergeability();

	/**
	 * @brief Get the total number of resolvable clause pairs
	 */
	long getResolvability();

	/**
	 * @brief Get the mergeability score normalized by resolvability
	 */
	double getMergeabilityScore1Norm1();

	/**
	 * @brief Get the mergeability score normalized by m^2
	 */
	double getMergeabilityScore1Norm2();

	/**
	 * @brief Get the mergeability score normalized by resolvability
	 */
	double getMergeabilityScore2Norm1();

	/**
	 * @brief Get the mergeability score normalized by m^2
	 */
	double getMergeabilityScore2Norm2();

	/**
	 * @brief Get the average clause width before resolution
	 */
	double getPreResolutionClauseWidth();

	/**
	 * @brief Get the average clause width of clauses generated by the first step of resolution
	 */
	double getPostResolutionClauseWidth();

private:
	void _convertPyClausesToCpp(long long* pyClauses, long long size);
	void _convertPyVarSetToCpp(std::set<long long>& varSet, long long* pyVarSet);
	void _generateLookupTable();
	void _getLookupTablesForVarSet(
		std::vector<std::vector<unsigned int>>& posClauseIndices, std::vector<std::vector<unsigned int>>& negClauseIndices,
		const std::set<long long>& varSet
	);
	void _copyClausesForVarSet(std::vector<std::vector<long long>>& clausesCopy, const std::set<long long>& varSet);

	bool m_dirtyLookupTable = false;
	bool m_useSubsetCopy = false;
	long long m_numVariables = 0;
	long long m_numClauses = 0;
	std::vector<std::vector<long long>> m_clauses;
	std::vector<std::vector<unsigned int>> m_posClauseIndices;
	std::vector<std::vector<unsigned int>> m_negClauseIndices;
	ParamComputation::ResolvabilityMergeabilityOutput m_output;
};

#endif // PY_MERGEABILITY_H